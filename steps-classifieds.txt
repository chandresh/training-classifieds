Classifieds Website: minimal craigslist
---------------------------------

	- Users can signup
	- Users can post advertisements
	- Users can see contact requests on the ads
	
	- Admin can login
	- Admin can approve the advertisements
	- Admin can create categories
	- Visitors can view the listings by category
	- Visitors can search the listings
	- Visitors can view details of the listings
	- Visitors can contact the user who posted the ad by a 		contact form
--------------------------------------------------

User First Signs Up -> Post An Ad -> Admin Approves the ad -> Ad is displayed

* 2 types of users

* session/ db based login

* signup

* login

* search

* file upload

--------------------------------------------------------------

Models:

User:
	email
	password - virtual attribute
	name	
	address:text

Category
	name

Advert
	title
	image <-
	description
	contact_details
	user_id
	category_id
	approved:boolean

Lead
	name
	email
	phone
	message
	advert_id


User has many adverts
Category has many adverts
Advert has many leads
User has many leads through adverts

------------------------------------------------------------


1. Plan for the models & model attributes + some workflow.

2. Create a new rails projects

3. New repo on Github

4. Chose a template + modify it if required.

5. Use the template on layout.

6. Create a root (adverts/index)

7. Signup / Login:

- User model: scaffold + add a password_digest field + has_secured_password

rails g migration add_password_digest_to_users password_digest

- Create route for login
- signup form 
- login form
- session controller:
	new, create & destroy
- Create route for logout
- create a helper_method: current_user in the application_controller
- links to signup/login & logout



## Debug

1. Use puts

2. Use pry-rails

add to Gemfile
put "binding.pry" wherever you want to explore the running code.

Ctr-D to get out of pry and move to next binding.pry or normal.

## Gemfile groups

group :development do
  gem 'pry-rails'
  gem 'sqlite3'
end

group :production do
  gem 'pg'
end

#### Homework: ####  11 June 2013

1. Practice the stuff we discussed.

2. Create a new project and use devise gem to create complete user sign up & login.

https://github.com/plataformatec/devise

## adding a Gem requires ###

Reading the wiki of the Gem at Github
Googling for errors & checking stackoverflow
Going through Railscasts if any
-- sometimes, 
1. Posting the issue.
2. even fixing bugs in the Gem 
â€¦ and become a contributor as a side-effect --

############

8. Create a my account section for the users. The users can edit/view their account & only their account details.

9. Admin related stuff: admin login.

10. Admin can manage users, can view/edit the details of any users.

11. Admin category management.

12. Admin can manage/post adverts

13. Admin approves the advert
	added an approved field to adverts

##### Tomorrow ###########

## Discussion on attr_accessible and why it is bad to add every field to it.

## File uploads: Paperclip Gem
- Install ImageMagick
- Add paperclip to Gemfile
- Bundle & then restart the server
- rails generate paperclip advert image
- in the model: advert.rb
attr_accessible  :image
has_attached_file :image, :styles => { :medium => "300x300>", :thumb => "100x100>" }
- rake db:migrate
- <%= simple_form_for @advert, :html => { :multipart => true } do |f| %>
- <%= f.input :image %>
- To access the image:
<%= image_tag @advert.image %>
<%= image_tag @advert.image.url(:medium) %>
<%= image_tag @advert.image.url(:thumb) %>


## Emails

14. Members can post an adverts or see their past adverts => file upload

15. Work on displaying the adverts

16. Contact form for the adverts => Emailing

Homework
Try https://github.com/carrierwaveuploader/carrierwave

#### Scaffold ####

If you do any typo:

--------------------------
If the migration is already run:

rake db:rollback
--------------------------

rails destroy scaffold Advert


### Use scaffold, but ###

1. Delete extra actions.

2. Disable extra routes. -> 404 error. 

resources :users, only: [:show, :new]

3. Use before_filters to protect member or admin only stuff

4. MOST IMPORTANT: Always access stuff from current_user (or similar) for the logged in users.

@advert = Advert.new XXX Totally wrong
@advert = current_user.adverts.new ## PERFECT!

5. Delete views that you don't require.

6. SUPER IMPORTANT: check attr_accessible list
